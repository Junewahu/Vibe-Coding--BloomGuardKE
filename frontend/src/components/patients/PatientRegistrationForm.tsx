import React from 'react';
import {
  Box,
  Button,
  FormControl,
  FormLabel,
  Input,
  Select,
  Stack,
  Textarea,
  useToast,
  Grid,
  GridItem,
  FormErrorMessage,
  Checkbox,
  VStack,
  Heading,
  Divider,
} from '@chakra-ui/react';
import { useForm, Controller } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { usePatient } from '../../hooks/usePatient';
import { Patient } from '../../types/patient';

const patientSchema = z.object({
  first_name: z.string().min(1, 'First name is required'),
  last_name: z.string().min(1, 'Last name is required'),
  date_of_birth: z.string().min(1, 'Date of birth is required'),
  gender: z.enum(['male', 'female', 'other']),
  contact_info: z.object({
    phone: z.string().min(1, 'Phone number is required'),
    alternative_phone: z.string().optional(),
    email: z.string().email('Invalid email').optional(),
    address: z.object({
      street: z.string().min(1, 'Street address is required'),
      city: z.string().min(1, 'City is required'),
      county: z.string().min(1, 'County is required'),
      postal_code: z.string().optional(),
      coordinates: z.object({
        latitude: z.number(),
        longitude: z.number(),
      }).optional(),
    }),
  }),
  demographics: z.object({
    ethnicity: z.string().optional(),
    language_preference: z.string().min(1, 'Language preference is required'),
    education_level: z.string().optional(),
    occupation: z.string().optional(),
    insurance_provider: z.string().optional(),
    insurance_number: z.string().optional(),
  }),
  medical_history: z.object({
    allergies: z.array(z.string()).default([]),
    chronic_conditions: z.array(z.string()).default([]),
    previous_surgeries: z.array(z.string()).default([]),
    family_history: z.array(z.string()).default([]),
    current_medications: z.array(z.string()).default([]),
  }),
  biometrics: z.object({
    fingerprint_id: z.string().optional(),
    facial_id: z.string().optional(),
    photo_url: z.string().optional(),
  }).optional(),
  status: z.enum(['active', 'inactive', 'deceased']).default('active'),
  flags: z.object({
    incomplete_record: z.boolean().default(false),
    high_risk: z.boolean().default(false),
    special_needs: z.boolean().default(false),
    requires_follow_up: z.boolean().default(false),
  }),
});

type PatientFormData = z.infer<typeof patientSchema>;

interface PatientRegistrationFormProps {
  onSuccess?: (patient: Patient) => void;
  onCancel?: () => void;
}

export const PatientRegistrationForm: React.FC<PatientRegistrationFormProps> = ({
  onSuccess,
  onCancel,
}) => {
  const {
    register,
    handleSubmit,
    control,
    formState: { errors, isSubmitting },
  } = useForm<PatientFormData>({
    resolver: zodResolver(patientSchema),
    defaultValues: {
      medical_history: {
        allergies: [],
        chronic_conditions: [],
        previous_surgeries: [],
        family_history: [],
        current_medications: [],
      },
      flags: {
        incomplete_record: false,
        high_risk: false,
        special_needs: false,
        requires_follow_up: false,
      },
      status: 'active',
    },
  });

  const { createPatient } = usePatient();
  const toast = useToast();

  const onSubmit = async (data: PatientFormData) => {
    try {
      const patient = await createPatient({
        ...data,
        mrn: '', // This will be generated by the backend
        caregivers: [], // This will be managed separately
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      });
      toast({
        title: 'Patient registered successfully',
        status: 'success',
        duration: 3000,
      });
      onSuccess?.(patient);
    } catch (error) {
      // Error is handled by the hook
    }
  };

  return (
    <Box as="form" onSubmit={handleSubmit(onSubmit)}>
      <VStack spacing={6} align="stretch">
        <Heading size="md">Basic Information</Heading>
        <Grid templateColumns="repeat(2, 1fr)" gap={4}>
          <GridItem>
            <FormControl isInvalid={!!errors.first_name}>
              <FormLabel>First Name</FormLabel>
              <Input {...register('first_name')} />
              <FormErrorMessage>{errors.first_name?.message}</FormErrorMessage>
            </FormControl>
          </GridItem>
          <GridItem>
            <FormControl isInvalid={!!errors.last_name}>
              <FormLabel>Last Name</FormLabel>
              <Input {...register('last_name')} />
              <FormErrorMessage>{errors.last_name?.message}</FormErrorMessage>
            </FormControl>
          </GridItem>
          <GridItem>
            <FormControl isInvalid={!!errors.date_of_birth}>
              <FormLabel>Date of Birth</FormLabel>
              <Input type="date" {...register('date_of_birth')} />
              <FormErrorMessage>{errors.date_of_birth?.message}</FormErrorMessage>
            </FormControl>
          </GridItem>
          <GridItem>
            <FormControl isInvalid={!!errors.gender}>
              <FormLabel>Gender</FormLabel>
              <Select {...register('gender')}>
                <option value="">Select Gender</option>
                <option value="male">Male</option>
                <option value="female">Female</option>
                <option value="other">Other</option>
              </Select>
              <FormErrorMessage>{errors.gender?.message}</FormErrorMessage>
            </FormControl>
          </GridItem>
        </Grid>

        <Divider />

        <Heading size="md">Contact Information</Heading>
        <Grid templateColumns="repeat(2, 1fr)" gap={4}>
          <GridItem>
            <FormControl isInvalid={!!errors.contact_info?.phone}>
              <FormLabel>Phone Number</FormLabel>
              <Input {...register('contact_info.phone')} />
              <FormErrorMessage>{errors.contact_info?.phone?.message}</FormErrorMessage>
            </FormControl>
          </GridItem>
          <GridItem>
            <FormControl isInvalid={!!errors.contact_info?.alternative_phone}>
              <FormLabel>Alternative Phone</FormLabel>
              <Input {...register('contact_info.alternative_phone')} />
              <FormErrorMessage>{errors.contact_info?.alternative_phone?.message}</FormErrorMessage>
            </FormControl>
          </GridItem>
          <GridItem>
            <FormControl isInvalid={!!errors.contact_info?.email}>
              <FormLabel>Email</FormLabel>
              <Input type="email" {...register('contact_info.email')} />
              <FormErrorMessage>{errors.contact_info?.email?.message}</FormErrorMessage>
            </FormControl>
          </GridItem>
        </Grid>

        <Grid templateColumns="repeat(2, 1fr)" gap={4}>
          <GridItem>
            <FormControl isInvalid={!!errors.contact_info?.address?.street}>
              <FormLabel>Street Address</FormLabel>
              <Input {...register('contact_info.address.street')} />
              <FormErrorMessage>{errors.contact_info?.address?.street?.message}</FormErrorMessage>
            </FormControl>
          </GridItem>
          <GridItem>
            <FormControl isInvalid={!!errors.contact_info?.address?.city}>
              <FormLabel>City</FormLabel>
              <Input {...register('contact_info.address.city')} />
              <FormErrorMessage>{errors.contact_info?.address?.city?.message}</FormErrorMessage>
            </FormControl>
          </GridItem>
          <GridItem>
            <FormControl isInvalid={!!errors.contact_info?.address?.county}>
              <FormLabel>County</FormLabel>
              <Input {...register('contact_info.address.county')} />
              <FormErrorMessage>{errors.contact_info?.address?.county?.message}</FormErrorMessage>
            </FormControl>
          </GridItem>
          <GridItem>
            <FormControl isInvalid={!!errors.contact_info?.address?.postal_code}>
              <FormLabel>Postal Code</FormLabel>
              <Input {...register('contact_info.address.postal_code')} />
              <FormErrorMessage>{errors.contact_info?.address?.postal_code?.message}</FormErrorMessage>
            </FormControl>
          </GridItem>
        </Grid>

        <Divider />

        <Heading size="md">Demographics</Heading>
        <Grid templateColumns="repeat(2, 1fr)" gap={4}>
          <GridItem>
            <FormControl isInvalid={!!errors.demographics?.ethnicity}>
              <FormLabel>Ethnicity</FormLabel>
              <Input {...register('demographics.ethnicity')} />
              <FormErrorMessage>{errors.demographics?.ethnicity?.message}</FormErrorMessage>
            </FormControl>
          </GridItem>
          <GridItem>
            <FormControl isInvalid={!!errors.demographics?.language_preference}>
              <FormLabel>Language Preference</FormLabel>
              <Select {...register('demographics.language_preference')}>
                <option value="">Select Language</option>
                <option value="english">English</option>
                <option value="swahili">Swahili</option>
                <option value="other">Other</option>
              </Select>
              <FormErrorMessage>{errors.demographics?.language_preference?.message}</FormErrorMessage>
            </FormControl>
          </GridItem>
          <GridItem>
            <FormControl isInvalid={!!errors.demographics?.education_level}>
              <FormLabel>Education Level</FormLabel>
              <Select {...register('demographics.education_level')}>
                <option value="">Select Education Level</option>
                <option value="none">None</option>
                <option value="primary">Primary</option>
                <option value="secondary">Secondary</option>
                <option value="tertiary">Tertiary</option>
              </Select>
              <FormErrorMessage>{errors.demographics?.education_level?.message}</FormErrorMessage>
            </FormControl>
          </GridItem>
          <GridItem>
            <FormControl isInvalid={!!errors.demographics?.occupation}>
              <FormLabel>Occupation</FormLabel>
              <Input {...register('demographics.occupation')} />
              <FormErrorMessage>{errors.demographics?.occupation?.message}</FormErrorMessage>
            </FormControl>
          </GridItem>
        </Grid>

        <Divider />

        <Heading size="md">Medical History</Heading>
        <Stack spacing={4}>
          <FormControl>
            <FormLabel>Allergies</FormLabel>
            <Textarea
              {...register('medical_history.allergies')}
              placeholder="Enter allergies, separated by commas"
            />
          </FormControl>
          <FormControl>
            <FormLabel>Chronic Conditions</FormLabel>
            <Textarea
              {...register('medical_history.chronic_conditions')}
              placeholder="Enter chronic conditions, separated by commas"
            />
          </FormControl>
          <FormControl>
            <FormLabel>Previous Surgeries</FormLabel>
            <Textarea
              {...register('medical_history.previous_surgeries')}
              placeholder="Enter previous surgeries, separated by commas"
            />
          </FormControl>
          <FormControl>
            <FormLabel>Family History</FormLabel>
            <Textarea
              {...register('medical_history.family_history')}
              placeholder="Enter family medical history, separated by commas"
            />
          </FormControl>
          <FormControl>
            <FormLabel>Current Medications</FormLabel>
            <Textarea
              {...register('medical_history.current_medications')}
              placeholder="Enter current medications, separated by commas"
            />
          </FormControl>
        </Stack>

        <Divider />

        <Heading size="md">Flags</Heading>
        <Grid templateColumns="repeat(2, 1fr)" gap={4}>
          <GridItem>
            <FormControl>
              <Checkbox {...register('flags.incomplete_record')}>
                Incomplete Record
              </Checkbox>
            </FormControl>
          </GridItem>
          <GridItem>
            <FormControl>
              <Checkbox {...register('flags.high_risk')}>
                High Risk
              </Checkbox>
            </FormControl>
          </GridItem>
          <GridItem>
            <FormControl>
              <Checkbox {...register('flags.special_needs')}>
                Special Needs
              </Checkbox>
            </FormControl>
          </GridItem>
          <GridItem>
            <FormControl>
              <Checkbox {...register('flags.requires_follow_up')}>
                Requires Follow-up
              </Checkbox>
            </FormControl>
          </GridItem>
        </Grid>

        <Stack direction="row" spacing={4} justify="flex-end">
          <Button onClick={onCancel}>Cancel</Button>
          <Button
            type="submit"
            colorScheme="blue"
            isLoading={isSubmitting}
          >
            Register Patient
          </Button>
        </Stack>
      </VStack>
    </Box>
  );
}; 